plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.13'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'final_backend'
//version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.apache.commons:commons-lang3:3.12.0'  // 쿠폰 랜덤 번호 생성
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.91' // Amazon S3 SDK

	// Google Analytics
	implementation 'com.google.analytics:google-analytics-data:0.16.0'

	// social login
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
    testImplementation 'junit:junit:4.13.1'
//	implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
//	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.0'
//	implementation 'com.auth0:java-jwt:3.18.2'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	implementation 'org.json:json:20210307'

//	implementation 'com.google.code.gson:gson:2.8.8' // version은 가장 최신 버전을 사용하세요


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
}

processResources {
	filesMatching('**/application.properties') {
		expand([
				DATABASE_HOST     : project.findProperty('DATABASE_HOST') ?: System.getenv('DATABASE_HOST'),
				DATABASE_NAME     : project.findProperty('DATABASE_NAME') ?: System.getenv('DATABASE_NAME'),
				DATABASE_USERNAME : project.findProperty('DATABASE_USERNAME') ?: System.getenv('DATABASE_USERNAME'),
				DATABASE_PASSWORD : project.findProperty('DATABASE_PASSWORD') ?: System.getenv('DATABASE_PASSWORD'),
				FLASK_URL         : project.findProperty('FLASK_URL') ?: System.getenv('FLASK_URL'),
				WEB_URL         : project.findProperty('WEB_URL') ?: System.getenv('WEB_URL'),
				S3_ACCESS_KEY         : project.findProperty('S3_ACCESS_KEY') ?: System.getenv('S3_ACCESS_KEY'),
				S3_SECRET_KEY         : project.findProperty('S3_SECRET_KEY') ?: System.getenv('S3_SECRET_KEY'),
				KAKAO_ADMIN_KEY         : project.findProperty('KAKAO_ADMIN_KEY') ?: System.getenv('KAKAO_ADMIN_KEY'),
				GOOGLE_APPLICATION_CREDENTIALS         : project.findProperty('GOOGLE_APPLICATION_CREDENTIALS') ?: System.getenv('GOOGLE_APPLICATION_CREDENTIALS'),

		])
	}
}


tasks.named('test') {
	useJUnitPlatform()
}
